## SALIDA DE CONSOLA

Started by GitHub push by mgvazquez32
Obtained Jenkinsfile from git https://github.com/mgvazquez32/nodejs-helloworld-api.git
[Pipeline] Start of Pipeline
[Pipeline] node
Running on Jenkins  in /var/lib/jenkins/workspace/nodejs-api
[Pipeline] {
[Pipeline] stage
[Pipeline] { (Declarative: Checkout SCM)
[Pipeline] checkout
Selected Git installation does not exist. Using Default
The recommended git tool is: NONE
No credentials specified
 > git rev-parse --resolve-git-dir /var/lib/jenkins/workspace/nodejs-api/.git # timeout=10
Fetching changes from the remote Git repository
 > git config remote.origin.url https://github.com/mgvazquez32/nodejs-helloworld-api.git # timeout=10
Fetching upstream changes from https://github.com/mgvazquez32/nodejs-helloworld-api.git
 > git --version # timeout=10
 > git --version # 'git version 2.45.2'
 > git fetch --tags --force --progress -- https://github.com/mgvazquez32/nodejs-helloworld-api.git +refs/heads/*:refs/remotes/origin/* # timeout=10
 > git rev-parse refs/remotes/origin/main^{commit} # timeout=10
Checking out Revision 579946c4f5981fe443b4f082af1b5613bbbd7ed4 (refs/remotes/origin/main)
 > git config core.sparsecheckout # timeout=10
 > git checkout -f 579946c4f5981fe443b4f082af1b5613bbbd7ed4 # timeout=10
Commit message: "Update Jenkinsfile"
 > git rev-list --no-walk 5f8b8fdf469f62561505598785aa513517f530ee # timeout=10
[Pipeline] }
[Pipeline] // stage
[Pipeline] withEnv
[Pipeline] {
[Pipeline] stage
[Pipeline] { (Declarative: Tool Install)
[Pipeline] tool
[Pipeline] envVarsForTool
[Pipeline] }
[Pipeline] // stage
[Pipeline] withEnv
[Pipeline] {
[Pipeline] stage
[Pipeline] { (Build)
[Pipeline] tool
[Pipeline] envVarsForTool
[Pipeline] withEnv
[Pipeline] {
[Pipeline] echo
EJECUTAR NPM INSTALL
[Pipeline] sh
+ npm install

up to date, audited 368 packages in 2s

45 packages are looking for funding
  run `npm fund` for details

10 vulnerabilities (3 low, 2 moderate, 5 high)

To address all issues, run:
  npm audit fix

Run `npm audit` for details.
[Pipeline] }
[Pipeline] // withEnv
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Test)
[Pipeline] tool
[Pipeline] envVarsForTool
[Pipeline] withEnv
[Pipeline] {
[Pipeline] echo
EJECUTAR NPM TEST PUSH
[Pipeline] sh
+ npm test

> nodejs-helloworld-api@1.0.0 test
> jest --forceExit

  console.log
    Server is listening on port 3000

      at Server.log (index.js:10:13)

PASS ./index.test.js
  GET /
    âœ“ responds with hello world message in JSON format (64 ms)

Test Suites: 1 passed, 1 total
Tests:       1 passed, 1 total
Snapshots:   0 total
Time:        0.698 s, estimated 1 s
Ran all test suites.
Force exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?
[Pipeline] }
[Pipeline] // withEnv
[Pipeline] }
[Pipeline] // stage
[Pipeline] }
[Pipeline] // withEnv
[Pipeline] }
[Pipeline] // withEnv
[Pipeline] }
[Pipeline] // node
[Pipeline] End of Pipeline
Finished: SUCCESS
